#!/usr/bin/env python

#####################################################################
# This file is used to generate a setenv.csh script in the installation
# directory that can be used to setup one's environment to use the
# programs and libraries installed there. This takes the place of the
# mk_setenv.csh script in the Hall-D scripts directory.
#
# This should get called anytime the user specifies the "install" target
# on the command line. e.g.:
#
#  scons -u install
#
# It is called from the bottom of the top-level SConstruct file
#
# Nov. 5, 2013  DL
#####################################################################

import os, sys
import subprocess
import datetime
from stat import *

# Package information must be passed in via command line arguments
if len(sys.argv)>1: INSTALL_PREFIX = sys.argv[1]
if len(sys.argv)>2: BINARY_DIR     = sys.argv[2]
if len(sys.argv)>3: SOURCE_DIR     = sys.argv[3]


##################################
# mk_setenv_csh
##################################
def mk_setenv_csh():
    global INSTALL_PREFIX, BINARY_DIR, SOURCE_DIR

    ofdir = INSTALL_PREFIX
    ofname = '%s/bin/jana-setenv.csh' % ofdir
    if not os.path.exists(os.path.dirname(ofname)): os.makedirs( os.path.dirname(ofname) )
    # print('Making '+ofname)

    strout = ''

    # Header
    platform = subprocess.Popen(["uname", "-a"],stdout=subprocess.PIPE).communicate()[0]
    strout += '#!/bin/tcsh\n'
    strout += '#\n'
    strout += '# This file was generated by scripts/jana-mksetenv.py\n'
    strout += '#\n'
    strout += '# Generation date: %s\n' % datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
    strout += '#\n'
    strout += '#       User: %s\n' % os.getenv('USER', 'Unknown')
    strout += '#       Host: %s\n' % os.getenv('HOST', 'Unknown')
    strout += '#   platform: %s' %  platform.decode()
    strout += '\n'
    strout += '\n'

    # (DY)LD_LIBRARY_PATH
    # On BSD systems, DYLD_LIBRARY_PATH is used while on most others
    # (including Linux) LD_LIBRARY_PATH is used. Here, we set the LDLPV
    # variable to name of the variable to set. We determine this by whether
    # or not DYLD_LIBRARY_PATH is set. At the same time, we make sure the
    # variable is at least defined (empty if needed) so the rest of the
    # generated script can just add to it without checking for existence.
    LDLPV='LD_LIBRARY_PATH'
    if os.getenv('DYLD_LIBRARY_PATH', 'unset') != 'unset': LDLPV='DYLD_LIBRARY_PATH'

    strout += '# Make sure %s is set\n' % LDLPV
    strout += 'if ( ! $?%s ) then\n' % LDLPV
    strout += '   setenv %s\n' % LDLPV
    strout += 'endif\n'
    strout += '\n'

    # C++ compiler
    CXX = os.getenv('CXX')
    if CXX != None:
        strout += "# C++ compiler"
        strout += "# n.b. this only reflects what these variables were set to when JANA was"
        strout += "#      built. It may not capture all relevant environment variables!"
        strout += "setenv CXX " % CXX
        CC = os.getenv('CC')
        if CC != None: strout += "setenv CC " % CC
        LD = os.getenv('LD')
        if LD != None: strout += "setenv LD " % LD

        strout += '\n'

    # JANA
    strout += '# JANA\n'
    strout += 'setenv JANA_HOME %s\n' % INSTALL_PREFIX
    strout += 'setenv JANA_PLUGIN_PATH ${JANA_HOME}/plugins\n'
    strout += 'setenv PATH ${JANA_HOME}/bin:${PATH}\n'
    strout += 'setenv JANA_CALIB_URL %s\n' % os.getenv('JANA_CALIB_URL', 'NOT_SET')
    strout += '\n'

    # CCDB
    ccdb_home = os.getenv('CCDB_HOME')
    if ccdb_home != None:
        strout += '# CCDB\n'
        strout += 'setenv CCDB_HOME %s\n' % ccdb_home
        strout += 'if ( -e $CCDB_HOME/environment.csh ) then\n'
        strout += '  source $CCDB_HOME/environment.csh\n'
        strout += 'endif\n'
        strout += 'setenv CCDB_CONNECTION ${JANA_CALIB_URL}\n'
        strout += '\n'

    # ROOT
    rootsys = os.getenv('ROOTSYS')
    if rootsys != None:
        strout += '# ROOT\n'
        strout += 'if ( -e %s/bin/thisroot.csh ) then\n' % rootsys
        strout += '  source %s/bin/thisroot.csh\n'  % rootsys
        strout += 'endif\n'
        strout += '\n'

    # Xerces
    xercescroot = os.getenv('XERCESCROOT')
    if xercescroot != None:
        strout += '# Xerces\n'
        strout += 'setenv XERCESCROOT %s\n' % xercescroot
        strout += 'setenv PATH ${XERCESCROOT}/bin:${PATH}\n'
        strout += 'setenv %s ${XERCESCROOT}/lib:${%s}\n' % (LDLPV, LDLPV)
        strout += '\n'

    # Make sure output directory eists
    try:
        os.mkdir(ofdir)
    except OSError:
        pass

    # Write to file
    f = open(ofname, 'w')
    f.write(strout)
    f.close()
    os.chmod(ofname, S_IRWXU + S_IRGRP + S_IXGRP + S_IROTH + S_IXOTH)


##################################
# mk_setenv_bash
##################################
def mk_setenv_bash():
    global INSTALL_PREFIX, BINARY_DIR, SOURCE_DIR

    ofdir = INSTALL_PREFIX
    ofname = '%s/bin/jana-setenv.sh' % ofdir
    if not os.path.exists(os.path.dirname(ofname)): os.makedirs( os.path.dirname(ofname) )
    # print('Making '+ofname)

    strout = ''

    # Header
    platform = subprocess.Popen(["uname", "-a"],stdout=subprocess.PIPE).communicate()[0]
    strout += '#!/bin/sh\n'
    strout += '#\n'
    strout += '# This file was generated by scripts/jana-mksetenv.py\n'
    strout += '#\n'
    strout += '# Generation date: %s\n' % datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")
    strout += '#\n'
    strout += '#       User: %s\n' % os.getenv('USER', 'Unknown')
    strout += '#       Host: %s\n' % os.getenv('HOST', 'Unknown')
    strout += '#   platform: %s' %  platform.decode()
    strout += '\n'
    strout += '\n'

    # (DY)LD_LIBRARY_PATH
    # On BSD systems, DYLD_LIBRARY_PATH is used while on most others
    # (including Linux) LD_LIBRARY_PATH is used. Here, we set the LDLPV
    # variable to name of the variable to set. We determine this by whether
    # or not DYLD_LIBRARY_PATH is set. At the same time, we make sure the
    # variable is at least defined (empty if needed) so the rest of the
    # generated script can just add to it without checking for existence.
    LDLPV='LD_LIBRARY_PATH'
    if os.getenv('DYLD_LIBRARY_PATH', 'unset') != 'unset': LDLPV='DYLD_LIBRARY_PATH'

    strout += '# Make sure %s is set\n' % LDLPV
    strout += 'if [ -z "$%s" ]; then\n' % LDLPV
    strout += '   export %s=""\n' % LDLPV
    strout += 'fi\n'
    strout += '\n'

    # C++ compiler
    CXX = os.getenv('CXX')
    if CXX != None:
        strout += "# C++ compiler"
        strout += "# n.b. this only reflects what these variables were set to when JANA was"
        strout += "#      built. It may not capture all relevant environment variables!"
        strout += "export CXX=" % CXX
        CC = os.getenv('CC')
        if CC != None: strout += "export CC=" % CC
        LD = os.getenv('LD')
        if LD != None: strout += "export LD=" % LD

    # JANA
    strout += '# JANA\n'
    strout += 'export JANA_HOME=%s\n' % INSTALL_PREFIX
    strout += 'export JANA_PLUGIN_PATH=${JANA_HOME}/plugins\n'
    strout += 'export PATH=${JANA_HOME}/bin:${PATH}\n'
    strout += 'export JANA_CALIB_URL=%s\n' % os.getenv('JANA_CALIB_URL', 'NOT_SET')
    strout += '\n'

    # CCDB
    ccdb_home = os.getenv('CCDB_HOME')
    if ccdb_home != None:
        strout += '# CCDB\n'
        strout += 'export CCDB_HOME=%s\n' % ccdb_home
        strout += 'if [ -e $CCDB_HOME/environment.sh ]; then\n'
        strout += '  . $CCDB_HOME/environment.sh\n'
        strout += 'fi\n'
        strout += 'export CCDB_CONNECTION=${JANA_CALIB_URL}\n'
        strout += '\n'

    # ROOT
    rootsys = os.getenv('ROOTSYS')
    if rootsys != None:
        strout += '# ROOT\n'
        strout += 'if [ -e %s/bin/thisroot.sh ]; then\n' % rootsys
        strout += '  . %s/bin/thisroot.sh\n'  % rootsys
        strout += 'fi\n'
        strout += '\n'

    # Xerces
    xercescroot = os.getenv('XERCESCROOT')
    if xercescroot != None:
        strout += '# Xerces\n'
        strout += 'export XERCESCROOT=%s\n' % xercescroot
        strout += 'export PATH=${XERCESCROOT}/bin:${PATH}\n'
        strout += 'export %s=${XERCESCROOT}/lib:${%s}\n' % (LDLPV, LDLPV)
        strout += '\n'

    # Make sure output directory eists
    try:
        os.mkdir(ofdir)
    except OSError:
        pass

    # Write to file
    f = open(ofname, 'w')
    f.write(strout)
    f.close()
    os.chmod(ofname, S_IRWXU + S_IRGRP + S_IXGRP + S_IROTH + S_IXOTH)

#-------------------------------------------------------------------------

mk_setenv_bash()
mk_setenv_csh()
